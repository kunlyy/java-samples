package crk.bitmap;

import java.util.BitSet;

/**
 * ??????????????bitmap??
 *
 * @author kun
 */

public class BitmapTest {

	int[] tem;

	public BitmapTest(int length) {

		this.tem = new int[length];

	}

	private int shift = 5;
	private int mask = 0x1F;

	/**
	 * ????????bitmap??
	 *
	 * @param oriNum ????????????????
	 */
	public void put(int oriNum, int[] arr) {
		int index_loc = oriNum >> shift;    //int????????
		int bit_loc = oriNum & mask;    //int??32???????????????int??bit_loc??????????1.

		arr[index_loc] |= 1 << bit_loc;

	}

	/**
	 * ????????????bit??????1
	 *
	 * @param n
	 * @param arr
	 * @return
	 */
	public int test(int n, int[] arr) {
		int i;
		int flag;

		i = 1 << (n & shift);

		flag = arr[n >> mask] & i;

		return flag;
	}

	/**
	 * ???????????????????????????0
	 *
	 * @param n
	 * @param arr
	 */
	public void clr(int n, int[] arr) {
		int index_loc;
		index_loc = n >> shift;
		arr[index_loc] &= 0;
	}

	public void set(int num) {
		if (num < tem.length) {

			if (tem[num] != 1) {
				tem[num] = 1;
			}
		}

	}

	public boolean contain(int num) {

		if (num < tem.length) {

			if (tem[num] == 1) {
				return true;
			}
		}
		return false;
	}

	public static void main(String[] args) {

		int num = 10000, space;
		int[] arr;
		BitmapTest test = new BitmapTest(0);

		// ??????&&???????????
		space = num / 32 + 1;
		arr = new int[space];

		// ?????bit??0
		for (int i = 0; i <= num; i++)
			test.clr(i, arr);

		// ????num???????1
		test.put(num, arr);

		// ????
		if (test.test(num, arr) == 1) {
			System.out.println("?????\n");
		} else {
			System.out.println("???!\n");
		}

		int longNum = 2000;

		/* ???????? */

		long beforeMemory = Runtime.getRuntime().totalMemory();

		long start1 = System.currentTimeMillis();

		BitSet set = new BitSet(longNum);

		for (int i = 0; i < longNum; i++) {

			/* ????898989?????????20????????? */

			if (i != 898989) {

				set.set(i, true);

			}

		}

		/* ????20????????????? */

		long afterMemory = Runtime.getRuntime().totalMemory();

		long end1 = System.currentTimeMillis();

		System.out.println("?????????:" + (afterMemory - beforeMemory) / 1024
				/ 1024 + "MB");

		System.out.println("?????????:" + (end1 - start1) + "????");

		long start2 = System.currentTimeMillis();

		boolean isExit1 = set.get(898989);

		boolean isExit2 = set.get(900000);

		long end2 = System.currentTimeMillis();

		/* ?????20??????????898989???????????? */

		System.out.println(isExit1);

		System.out.println("20??????" + (isExit1 ? "????" : "??????") + 898989);

		System.out.println("20??????" + (isExit2 ? "????" : "??????") + 900000);

		System.out.println("??????:" + (end2 - start2) + "????");


	}

}